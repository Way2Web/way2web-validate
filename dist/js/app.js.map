{"version":3,"sources":["validate.js"],"names":["Way2Validate","$element","globals","errors","formGroups","selectors","group","input","attributes","validate","method","classes","error","help","init","on","send","find","closest","event","url","$","data","attr","serialize","axios","route","validateStatus","status","then","success","catch","preventDefault","unbind","submit","removeClass","remove","each","showErrors","field","fornGroup","addClass","append","join","console"],"mappings":";;AAAA;;;;;;;AAOA,SAASA,YAAT,CAAsBC,QAAtB,EAAgC;AAC5B;;;;;AAKA,QAAIC,UAAU;AACVC,gBAAY,EADF;AAEVC,oBAAY;AAFF,KAAd;;AAKA,QAAIC,YAAY;AACZC,eAAO,aADK;AAEZC,eAAO;AAFK,KAAhB;;AAKA,QAAIC,aAAa;AACbC,kBAAU,UADG;AAEbC,gBAAU;AAFG,KAAjB;;AAKA,QAAIC,UAAU;AACVC,eAAO,WADG;AAEVC,cAAO;AAFG,KAAd;;AAKA;;;;;AAKA,aAASC,IAAT,GAAgB;AACZb,iBAASc,EAAT,CAAY,QAAZ,EAAsBC,IAAtB;AACAd,gBAAQE,UAAR,GAAqBH,SAASgB,IAAT,CAAcZ,UAAUE,KAAxB,EAA+BW,OAA/B,CAAuCb,UAAUC,KAAjD,CAArB;;AAEA,eAAO,IAAP;AACH;;AAED;;;;;AAKA,aAASU,IAAT,CAAcG,KAAd,EAAqB;AACjB,YAAIC,MAAMC,EAAE,IAAF,EAAQC,IAAR,CAAad,WAAWC,QAAxB,CAAV;AACA,YAAIC,SAASW,EAAE,IAAF,EAAQE,IAAR,CAAaf,WAAWE,MAAxB,CAAb;AACA,YAAIY,OAAOD,EAAE,IAAF,EAAQG,SAAR,EAAX;;AAEAC,cAAM;AACFf,oBAAgBA,MADd;AAEFU,iBAAgBM,MAAMN,GAAN,CAFd;AAGFE,kBAAgBA,IAHd;AAIFK,4BAAgB,wBAASC,MAAT,EAAiB;AAC7B,uBAAOA,SAAS,GAAhB;AACH;AANC,SAAN,EAQKC,IARL,CAQUC,OARV,EASKC,KATL,CASWnB,KATX;;AAWAO,cAAMa,cAAN;AACH;;AAED;;;;;AAKA,aAASF,OAAT,CAAiBR,IAAjB,EAAuB;AACnB,YAAGA,KAAKM,MAAL,IAAe,GAAlB,EAAuB;AACnB1B,oBAAQC,MAAR,GAAiB,EAAjB;;AAEAF,qBAASgC,MAAT,CAAgB,QAAhB,EAA0BC,MAA1B;AACH,SAJD,MAIO;AACHhC,oBAAQE,UAAR,CAAmB+B,WAAnB,CAA+BxB,QAAQC,KAAvC;AACAV,oBAAQE,UAAR,CAAmBa,IAAnB,CAAwB,MAAMN,QAAQE,IAAtC,EAA4CuB,MAA5C;;AAEAlC,oBAAQC,MAAR,GAAiBmB,KAAKA,IAAL,CAAUnB,MAA3B;AACAkB,cAAEgB,IAAF,CAAOf,KAAKA,IAAL,CAAUnB,MAAjB,EAAyBmC,UAAzB;AACH;AACJ;;AAED;;;;;;AAMA,aAASA,UAAT,CAAoBC,KAApB,EAA2BpC,MAA3B,EAAmC;AAC/B,YAAIqC,YAAYvC,SAASgB,IAAT,CAAcI,EAAE,iBAAiBkB,KAAjB,GAAyB,IAA3B,CAAd,EAAgDrB,OAAhD,CAAwDb,UAAUC,KAAlE,CAAhB;;AAEAkC,kBAAUC,QAAV,CAAmB9B,QAAQC,KAA3B;AACA4B,kBAAUE,MAAV,CAAiB,kBAAkB/B,QAAQE,IAA1B,GAAiC,YAAjC,GAAgDV,OAAOwC,IAAP,CAAY,IAAZ,CAAhD,GAAoE,kBAArF;AACH;;AAED;;;;;AAKA,aAAS/B,KAAT,CAAeA,KAAf,EAAsB;AAClBgC,gBAAQhC,KAAR,CAAc,OAAd,EAAuBA,KAAvB;AACH;;AAED,WAAO;AACHE,cAAMA;AADH,KAAP;AAGH","file":"app.js","sourcesContent":["/**\n * Validate a form with ajax.\n *\n * @param {object} $element\n *\n * @return {object}\n */\nfunction Way2Validate($element) {\n    /**\n     * Global variables.\n     *\n     * @type {Object}\n     */\n    var globals = {\n        errors:     {},\n        formGroups: []\n    };\n\n    var selectors = {\n        group: '.form-group',\n        input: '.form-control'\n    };\n\n    var attributes = {\n        validate: 'validate',\n        method:   'method'\n    };\n\n    var classes = {\n        error: 'has-error',\n        help:  'help-block'\n    };\n\n    /**\n     * [init description]\n     *\n     * @return {object}\n     */\n    function init() {\n        $element.on('submit', send);\n        globals.formGroups = $element.find(selectors.input).closest(selectors.group);\n\n        return this;\n    }\n\n    /**\n     * Submit the form.\n     *\n     * @param {object} event\n     */\n    function send(event) {\n        var url = $(this).data(attributes.validate);\n        var method = $(this).attr(attributes.method);\n        var data = $(this).serialize();\n\n        axios({\n            method:         method,\n            url:            route(url),\n            data:           data,\n            validateStatus: function(status) {\n                return status < 500;\n            }\n        })\n            .then(success)\n            .catch(error);\n\n        event.preventDefault();\n    }\n\n    /**\n     * success\n     *\n     * @param {object} data\n     */\n    function success(data) {\n        if(data.status == 200) {\n            globals.errors = {};\n\n            $element.unbind('submit').submit();\n        } else {\n            globals.formGroups.removeClass(classes.error);\n            globals.formGroups.find('.' + classes.help).remove();\n\n            globals.errors = data.data.errors;\n            $.each(data.data.errors, showErrors);\n        }\n    }\n\n    /**\n     * Show the errors.\n     *\n     * @param {string} field\n     * @param {array}  errors\n     */\n    function showErrors(field, errors) {\n        var fornGroup = $element.find($('input[name=\"' + field + '\"]')).closest(selectors.group);\n\n        fornGroup.addClass(classes.error);\n        fornGroup.append('<span class=\"' + classes.help + '\"><strong>' + errors.join(', ') + '</strong></span>');\n    }\n\n    /**\n     * Error\n     *\n     * @param {object} error\n     */\n    function error(error) {\n        console.error('error', error);\n    }\n\n    return {\n        init: init\n    };\n}\n"]}